import org.apache.tools.ant.filters.*

ext {
  adpCoreVersion = project.hasProperty('adpCoreVersion') ? project.getProperty('adpCoreVersion') : '3.8-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '3.8-SNAPSHOT'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : 'https://development.adaptris.net/nexus/content/repositories/snapshots'
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'
  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : 'https://development.adaptris.net/javadocs/latest/Interlok-API/'
  interlokCommonJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : 'https://development.adaptris.net/javadocs/latest/Interlok-Common/'
  componentName='Interlok/JRuby Integration'
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion = '1.7.25'
  jrubyVersion = '9.2.0.0'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "jacoco"

sourceCompatibility = 1.8
group   = 'com.adaptris'
version = releaseVersion
def versionDir = "$buildDir/version"

// In this section you declare where to find the dependencies of your project
repositories {
  maven { url "$defaultNexusRepo" }
  maven { url "https://development.adaptris.net/nexus/content/groups/public" }
  maven { url "https://development.adaptris.net/nexus/content/repositories/snapshots" }
  maven { url "https://development.adaptris.net/nexus/content/repositories/releases" }
}


configurations {
  javadoc {}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
  all*.exclude group: 'org.glassfish.hk2.external'
  all*.exclude group: 'xalan', module: 'xalan'
  all*.exclude group: 'net.sf.saxon', module: 'saxon'
  all*.exclude group: 'org.codehaus.woodstox'
  all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  compile ("com.adaptris:interlok-core:$adpCoreVersion") { changing= true}
  compile ("com.adaptris:interlok-common:$adpCoreVersion") { changing= true}
  compile ("org.slf4j:slf4j-api:$slf4jVersion")
  compile ("org.jruby:jruby:$jrubyVersion")

  annotationProcessor ("com.adaptris:interlok-common:$adpCoreVersion") {changing= true}

  testCompile ('junit:junit:4.12')
  testCompile ("com.adaptris:interlok-stubs:$adpCoreVersion") { changing= true}
  testCompile ("org.apache.logging.log4j:log4j-core:2.8.1")
  testCompile ("org.apache.logging.log4j:log4j-1.2-api:2.8.1")
  testCompile ("org.apache.logging.log4j:log4j-slf4j-impl:2.8.1")
  testCompile ("org.apache.logging.log4j:log4j-api:2.8.1")
  testCompile ("org.mockito:mockito-all:1.9.5")

  javadoc("com.adaptris:interlok-core-apt:$adpCoreVersion") { changing= true}

}


jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}


sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}

task configureJRuby {
  doLast {
    def jrubyZipFile = "jruby-dist-" + jrubyVersion + "-bin.zip"
    def jrubyUrl = "https://repo1.maven.org/maven2/org/jruby/jruby-dist/" + jrubyVersion + "/" + jrubyZipFile
    def downloadDest = project.buildDir.getCanonicalPath() + "/" + jrubyZipFile
    def jrubyBinDir =  project.buildDir.getCanonicalPath() + "/jruby-" + jrubyVersion + "/bin"
    ant.get(src: jrubyUrl, dest: downloadDest, usetimestamp: true)
    ant.unzip(src: downloadDest, dest: project.buildDir, overwrite:true)
    ant.exec(executable: "cmd", osfamily: "windows", dir: jrubyBinDir) {
      arg(value: "/c")
      arg(value: "jruby.bat")
      arg(value: "-Sgem")
      arg(value: "install")
      arg(value: "jsonpath")
    }
    ant.exec(executable: "bash", osfamily: "unix", dir: jrubyBinDir) {
      arg(value: "jruby")
      arg(value: "-Sgem")
      arg(value: "install")
      arg(value: "jsonpath")
    }
  }
}

task copyUnitTestProperties(type: Copy) {
    delete file('src/test/resources/unit-tests.properties')
    from file('src/test/resources/unit-tests.properties.template')
    into ('src/test/resources/')
    rename { String fileName ->
      fileName.replace('unit-tests.properties.template', 'unit-tests.properties')
    }
    filter(ReplaceTokens, tokens: [jrubyVersion: jrubyVersion])
}

task deleteUnitTestProperties(type: Delete) {
    delete file('src/test/resources/unit-tests.properties')
}

// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'groupId', value: project.group)
      entry(key: 'artifactId', value: project.name)
      entry(key: 'build.version', value: project.version)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
    }
  }
}

javadoc {
  configure(options) {
      links = [
        interlokJavadocs,
        interlokCommonJavadocs,
      ]
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    title= componentName
  }
}

jacoco {
  toolVersion="0.8.0"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

check.dependsOn jacocoTestReport
processTestResources.dependsOn copyUnitTestProperties
processTestResources.dependsOn configureJRuby
clean.dependsOn deleteUnitTestProperties

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

artifacts {
  archives javadocJar
  archives examplesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }

      pom.withXml {
        asNode().appendNode("description", "Tighter coupling with JRuby rather than via JSR223")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.6.3+")
        properties.appendNode("tags", "ruby,jruby,scripting")
        properties.appendNode("license", "false")
        properties.appendNode("externalUrl", "http://jruby.org")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}
